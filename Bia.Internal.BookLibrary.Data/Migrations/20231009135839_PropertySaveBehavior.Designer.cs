// <auto-generated />
using System;
using Bia.Internal.BookLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bia.Internal.BookLibrary.Data.Migrations
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20231009135839_PropertySaveBehavior")]
    partial class PropertySaveBehavior
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.AdminNotify", b =>
                {
                    b.Property<int>("NotifyId");

                    b.Property<Guid>("Uid");

                    b.HasKey("NotifyId");

                    b.HasIndex("Uid");

                    b.ToTable("AdminNotifies");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.AppUser", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessGroup");

                    b.Property<DateTime>("DateJoined");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<string>("LoginName");

                    b.HasKey("Uid");

                    b.ToTable("AppUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.Arrangement", b =>
                {
                    b.Property<Guid>("AppUserUid");

                    b.Property<DateTime>("Date");

                    b.HasKey("AppUserUid");

                    b.ToTable("Arrangements");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.Author", b =>
                {
                    b.Property<Guid>("AuthorUid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.HasKey("AuthorUid");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.Book", b =>
                {
                    b.Property<int>("BiaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Annotation");

                    b.Property<int>("AverageRating");

                    b.Property<string>("CoverImage");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("Edition");

                    b.Property<string>("Isbn");

                    b.Property<int>("Language");

                    b.Property<int?>("Pages");

                    b.Property<string>("Subtitle");

                    b.Property<string>("Title");

                    b.Property<int?>("Year");

                    b.HasKey("BiaId");

                    b.ToTable("Books");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Book");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.BookAuthor", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<Guid>("AuthorUid");

                    b.HasKey("BookId", "AuthorUid");

                    b.HasIndex("AuthorUid");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.BookCategory", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("CategoryId");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.DownloadHistory", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DownloadDate");

                    b.Property<int?>("DownloadedBookBiaId");

                    b.Property<Guid>("UserUid");

                    b.HasKey("Uid");

                    b.HasIndex("DownloadedBookBiaId");

                    b.HasIndex("UserUid");

                    b.ToTable("DownloadHistories");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.IgnoredUser", b =>
                {
                    b.Property<Guid>("AppUserUid");

                    b.HasKey("AppUserUid");

                    b.ToTable("IgnoredUsers");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.RentHistory", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExtendedDueDate");

                    b.Property<int>("ExtendedTimesCount");

                    b.Property<DateTime?>("ReturnedDate");

                    b.Property<int?>("TakenBookBiaId");

                    b.Property<DateTime>("TakenDate");

                    b.Property<Guid>("UserUid");

                    b.HasKey("Uid");

                    b.HasIndex("TakenBookBiaId");

                    b.HasIndex("UserUid");

                    b.ToTable("RentHistories");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.RequestBook", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<Guid>("AppUserUid");

                    b.Property<DateTime>("Date");

                    b.HasKey("BookId", "AppUserUid");

                    b.HasIndex("AppUserUid");

                    b.ToTable("RequestBooks");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.Review", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookId");

                    b.Property<Guid>("RatedByUid");

                    b.Property<int>("Rating");

                    b.Property<string>("Text");

                    b.HasKey("Uid");

                    b.HasIndex("BookId");

                    b.HasIndex("RatedByUid");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.UploadHistory", b =>
                {
                    b.Property<Guid>("AppUserUid");

                    b.Property<int>("BookId");

                    b.Property<DateTime>("UploadDate");

                    b.HasKey("AppUserUid", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UploadHistories");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.UserNotify", b =>
                {
                    b.Property<Guid>("Uid");

                    b.Property<int>("BookId");

                    b.HasKey("Uid", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UserNotifies");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.Admin", b =>
                {
                    b.HasBaseType("Bia.Internal.BookLibrary.Data.AppUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.Ebook", b =>
                {
                    b.HasBaseType("Bia.Internal.BookLibrary.Data.Book");

                    b.Property<int>("EbookFormat");

                    b.Property<string>("Link");

                    b.Property<int?>("Size");

                    b.HasDiscriminator().HasValue("Ebook");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.PaperBook", b =>
                {
                    b.HasBaseType("Bia.Internal.BookLibrary.Data.Book");

                    b.Property<Guid?>("TakenByUserUid");

                    b.Property<DateTime?>("TakenDue");

                    b.HasIndex("TakenByUserUid");

                    b.HasDiscriminator().HasValue("PaperBook");
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.AdminNotify", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.Admin", "Admin")
                        .WithMany("AdminNotifies")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.Arrangement", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.AppUser", "AppUser")
                        .WithOne("Arrangement")
                        .HasForeignKey("Bia.Internal.BookLibrary.Data.Arrangement", "AppUserUid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.BookAuthor", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorUid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bia.Internal.BookLibrary.Data.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.BookCategory", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.Book", "Book")
                        .WithMany("Cathegories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bia.Internal.BookLibrary.Data.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.DownloadHistory", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.Ebook", "DownloadedBook")
                        .WithMany("DownloadHistory")
                        .HasForeignKey("DownloadedBookBiaId");

                    b.HasOne("Bia.Internal.BookLibrary.Data.AppUser", "User")
                        .WithMany("DownloadHistory")
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.IgnoredUser", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.AppUser", "AppUser")
                        .WithOne("Ignored")
                        .HasForeignKey("Bia.Internal.BookLibrary.Data.IgnoredUser", "AppUserUid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.RentHistory", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.PaperBook", "TakenBook")
                        .WithMany("RentHistory")
                        .HasForeignKey("TakenBookBiaId");

                    b.HasOne("Bia.Internal.BookLibrary.Data.AppUser", "User")
                        .WithMany("RentHistory")
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.RequestBook", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.AppUser", "AppUser")
                        .WithMany("ReqestBooks")
                        .HasForeignKey("AppUserUid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bia.Internal.BookLibrary.Data.Book", "Book")
                        .WithMany("ReqestBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.Review", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bia.Internal.BookLibrary.Data.AppUser", "RatedBy")
                        .WithMany("Reviews")
                        .HasForeignKey("RatedByUid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.UploadHistory", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.AppUser", "User")
                        .WithMany("UploadHistory")
                        .HasForeignKey("AppUserUid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bia.Internal.BookLibrary.Data.Book", "Book")
                        .WithMany("UploadHistory")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.UserNotify", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bia.Internal.BookLibrary.Data.AppUser", "AppUser")
                        .WithMany("UserNotifies")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bia.Internal.BookLibrary.Data.PaperBook", b =>
                {
                    b.HasOne("Bia.Internal.BookLibrary.Data.AppUser", "TakenByUser")
                        .WithMany("BooksTaken")
                        .HasForeignKey("TakenByUserUid");
                });
#pragma warning restore 612, 618
        }
    }
}
